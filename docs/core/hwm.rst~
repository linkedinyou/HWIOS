Websocket Messaging
===================

The handling of websocket data is done through the *HWIOS Websocket Messaging* protocol. It is a simple custom JSON data-protocol
that was designed by trial-and-error for this project. HWM is meant to make communication between server and web-clients as
straight-forward as possible, while keeping the messages relatively small. Like HTTP it uses uri's to route and address
method-calls. GET-parameters are processed as named groups in the regular expression for the matching uri. POST-like parameters are
included as a dict or list. The following syntax is used to communicate:

Client -> Server request
++++++++++++++++++++++++

* Websocket url-routes can be found in services/web_ui/urls.py. They look a lot like django's router-urls!

::
    
    #A remote call from javascript is done using the jquery.ws plugin like:
    hwios.ws.remote('/hyki/'+slug+'/save/',{params:{title:slug,content:'foobar'}},function(response){})
    #HWM message format: [function, params]
    ['/hyki/my_pagename/save/',{params:{'title':'foobar','content':'my first  '}}]
    #url-handler services/web_ui/urls.py routes the url to the save_page function in WS_Hyki
    (r'^/hyki/(?P<slug>[^/]+)/save/$', 'web_ui.controllers.ws.hyki', 'WS_Hyki', 'save_page'),
    #Websocket view handler function. Named groups from the regex and parameter keys are mixed in the function parameters
    def save_page(self, client, slug, params):
        return {}

Instead of django views having the request object available, HWIOS has the client variable in the function, which is also a reference to
the client connection(client.transport) and it's profile(client.profile). The function return will be sent back to our client as JSON.

Server -> Client response
+++++++++++++++++++++++++

The websocket router (services.web_ui.models.ws_router) decodes the bare websocket call to json, routes it to the appropriate controller, and sends
it's result(if any) back over the line like *self.transport.write(HWIOS.tools.json_encode([result, self.url]))*. The first parameter is the result
from the controller, and the second the url from the origin websocket remote request. This is necessary because responses could come back to the client in the wrong order.
Using the origin_url, the response is able to route back to the appropriate remote call response. It may be necessary to use uuid's to avoid wrong-order
within same remote function calls, but so far there haven't been a use-case which made that necessary. Some things to notice about the response:

* HTML is transferred over JSON with the data => dom => css_class convention. Django's render_to_string is used to render the templates.
* Status response data triggers a growl-like notification. It contains a general code_id, a language-specific i18n string and a notification type.

::

    #Response may look like: [params, origin-url]
    [{'status':{code:HYKI_PAGE_CREATED,i18n:"Hyki page created!",type:1}},data:{dom:{main:my_html_data}}},'origin url']
    #Data routes to our remote's response function 
    hwios.ws.remote('/hyki/'+slug+'/save/',{params:{title:slug,content:'foobar'}},function(response){
        console.log(response.data.dom.main);
    })
    
```
Server -> Client request
++++++++++++++++++++++++

A lot of times, data needs to be send to clients without a client initiating a request first. The same kind of url-routing technique can be used
to route server-initiated requests to a client. Uri's are used here the same way as on the serverside, but are captured and processed in javascript.

::
    
    #server function call to client, calls the client's remote property
    client.remote('/hyki/notify_others/', {'message':'foobar','from':client.profile.username})
    #server request-data looks like: [u'/hyki/notify_others/', {'message':'foobar','from':'anonymous_5012'}]
    #The javascript method is registered with a regex as well, and can use named groups for mixed in parameters as well(using xregexp).
    #Named capture groups can be defined like: '^/data/wiki/(?<slug>[^/]+)/delete/$' . The slug key will be a property of params then.
    hwios.ws.method('^/hyki/notify_others/$', function(params){
        console.log(params.from+' said: '+params.message);
    });    

.. note::
    So far there has't been a need to supply also a response from the client to the server after a server -> client request. This may be implemented at
    some point when it proves valueable.
    
Internal Client routing
+++++++++++++++++++++++
Besides the client request-response and server request, there is also an internal routing mechanism that's used to process the url in the navigation-bar
after the bootstrapping process, and to route button's data-uri's likewise to the appropriate method. This is the part where users actually start to
benefit from url's. Url's that point to a view(don't start with '/data/', or the initial bootstrapping url) are pushed or processed to/from the navigation-bar
using the html5 history api. This allows url's to be bookmarked and to share unique site resources with others. The router generally tries to find the module
first from the first parameter, and then routes the url through the module's route function. The route function looks like:

::
    
    route: function(uri, push_history) {
        if(urls == undefined) {
            urls = [
                [XRegExp('^/blog/$'),this.view_blog],
                [XRegExp('^/blog/(?<slug>[^/]+)/$'),this.view_article],
                [XRegExp('^/blog/(?<slug>[^/]+)/edit/$'),this.edit_article],
            ];
        }
        application.route_uri_to_mod_function(uri, urls, push_history);
    }
    return {
        init: function(uri, push_history) {
            application.functions.blog.route(uri, push_history);
            return 'blog';
        },
        load: function(uri, push_history) {
            application.functions.blog.route(uri, push_history);
        },
    }

The route function is called when the module is loaded or initialized. Route_uri_to_mod_function tries to match the function with a regexp, and calls the
appropriate method with optional named group parameters mixed in. 

Code References
---------------
.. automodule:: services.web_ui.models.ws_router
   :members:
   :show-inheritance:

.. automodule:: services.web_ui.models.ws_realm
   :members:
   :show-inheritance:

.. automodule:: services.web_ui.models.http
   :members:
   :show-inheritance:
       
.. automodule:: services.web_ui.models.hwm_queue
   :members:
   :show-inheritance:

